package ru.job4j.tutorial.iterator;

import java.util.ArrayList;
import java.util.Iterator;

/**
 * В этом классе проверяем, как работает итерация по
 * элементам нашей коллекции.
 * Т.е. есть что-то что дает возможность проходиться
 * по всем элементам любой коллекции, будь то ArrayList
 * или LinkedList или HashSet или HashMap и т.д.
 * <p>
 * Это что-то, есть не что иное, как интерфейс Iterable().
 * Iterable() - переводится "то по чему можно итерироваться (проходиться)"
 * Интерфейс Iterable() имеет всего лишь один метод Iterator<T> iterator(),
 * который возвращает итератор для элементов типа T.
 * Объект класса Iterator позволяет проходится по элементам нашей коллекции.
 * Очень много классов реализуют интерфейс Iterable().
 * и если мы хотим, чтобы по элементам нашего собственного класса можно
 * было проходиться, то необходимо реализовать интерфейс Iterable().
 * "Это например может понадобиться, когда у нас, к примеру, есть класс
 * Библиотека, и объекты этого класса хранят в себе какие-то книги.
 * И мы хотим, чтобы по нашему объекту можно было пройтись с помощью forEach,
 * то нужно реализовать Iterable(). Реализовать метод iterator(), где
 * опишем логику прохождения по нашим элементам.
 * <p>
 * Как работает Итератор: интератор хранит в себе указатель на элемент объекта.
 * И когда мы первый раз получаем итератор, указатель указывает на место до
 * первого объекта, т.е. на пространство до первого объетка. И каждый раз, когда
 * вызываем next(), указатель двигается на 1 вправо.
 */

public class Test {
    public static void main(String[] args) {
        ArrayList<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);

        /**
         * Обход коллекции до Java 5 осуществлялся напрямую
         * с помощью Итератора
         * Единственное отличие от forEach, то что в итераторе мы
         * можем одновременно удалять элементы.
         * Но только текущий элемент.
         * Удаляем тот элемент, на который указывает указатель.
         *
         */
        Iterator<Integer> itr = list.iterator();
        int idx = 0; //счетчик чтоб отслеживать позицию итератора.
        while (itr.hasNext()) {
            System.out.println(itr.next()); //вызвали next() - указатель передвинулся на 1-й элемент

            if (idx == 1) {
                itr.remove(); //удалим элемент под индексом 1, т.е. [2]
            }
            idx++;
        }
        System.out.println(list);

        /**
         * После Java 5 обход коллекции возможен с помощью цикла
         * forEach. По сути, под капотом forEach лежит всё тот же
         * Итератор. forEach - это некая абстракция для удобства.
         * Отличие от Итератора в том, что мы не можем удалять
         * элементы при их обходе, как в Итераторе.
         * Получим ошибку ConcurrentModificationException,
         * говорящей о том что мы не можем модифицировать
         * объект при переборе его с помощью forEach.
         */
        for (int x : list) {
            System.out.println(x);
        }
    }
}

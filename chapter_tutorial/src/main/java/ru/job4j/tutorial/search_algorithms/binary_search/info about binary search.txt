Двоичный поиск
Двоичный или логарифмический поиск часто используется из-за быстрого времени поиска.

Объяснение:
Этот вид поиска использует подход «Разделяй и властвуй»,
требует предварительной сортировки набора данных.

Алгоритм делит входную коллекцию на равные половины,
и с каждой итерацией сравнивает целевой элемент с элементом в середине.
Поиск заканчивается при нахождении элемента. Иначе продолжаем искать элемент,
разделяя и выбирая соответствующий раздел массива. Целевой элемент сравнивается
со средним.

Вот почему важно иметь отсортированную коллекцию при использовании двоичного поиска.

Поиск заканчивается, когда firstIndex (указатель) достигает lastIndex
(последнего элемента). Значит мы проверили весь массив Java и не нашли элемента.

Есть два способа реализации этого алгоритма: итеративный и рекурсивный.

Временная и пространственная сложности одинаковы для обоих способов
в реализации на Java.

Рекурсивный подход отличается вызовом самого метода при получении нового раздела.
В итеративном подходе всякий раз, когда мы определяли новый раздел, мы изменяли
первый и последний элементы, повторяя процесс в том же цикле.

Другое отличие – рекурсивные вызовы помещаются в стек и занимают одну единицу
пространства за вызов.

Временная сложность:
Временная сложность алгоритма двоичного поиска равна O(log (N)) из-за деления
массива пополам. Она превосходит O(N) линейного алгоритма.

Пространственная сложность:
Одна единица пространства требуется для хранения искомого элемента. Следовательно, пространственная сложность равна O(1).

Рекурсивный двоичный поиск хранит вызов метода в стеке. В худшем случае пространственная сложность потребует O(log (N)).

Применение:
Этот алгоритм используется в большинстве библиотек и используется с отсортированными структурами данных.

Двоичный поиск реализован в методе Arrays.binarySearch Java API.

